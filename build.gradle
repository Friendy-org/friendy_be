plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.1.1'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.767'


    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'  // 테스트 후 JaCoCo 리포트 생성
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: ['**/*.class'], excludes: ['**/friendy/community/FriendyBeApplication',
                                                                   '**/friendy/community/config/**',
                                                                   '**/friendy/community/global/**',
                                                                   '**/friendy/community/**/exception/**',
                                                                   '**/friendy/community/**/dto/**',
                                                                   '**/friendy/community/domain/common/**',
                                                                   '**/generated/**',
                                                                   '**/Q*.class' ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['friendy.community.FriendyBeApplication',
                        'friendy.community.config.*',
                        'friendy.community.global.*',
                        'friendy.community.**.exception.*',
                        'friendy.community.**.dto.*',
                        'friendy.community.domain.common.*',
                        '**/generated/**',
                        '**/Q*.class' ]
            limit {
                minimum = 0.80  // 최소 80% 커버리지 요구
            }
        }
    }
}